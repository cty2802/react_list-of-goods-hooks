{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","SortOrder","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","isResetButtonVisible","Ascending","visibleGoods","goods","preparedGoods","sort","firstItem","secondItem","Alphabetically","localeCompare","ByLength","length","reverse","getPreparedGoods","className","type","classNames","onClick","Descending","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,EAMAC,E,0EAnBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGF,K,WAAAA,E,sBAAAA,E,mBAAAA,M,cAMAC,O,qBAAAA,I,yBAAAA,I,6BAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASJ,EAASK,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,mBAASH,EAAUI,SAAvD,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAAuBJ,IAAcN,EAASK,SAC/CG,IAAeP,EAAUU,UAExBC,EAlCR,SACEC,EACAP,EACAE,GAEA,IAAMM,EAAuB,YAAOD,GAoBpC,OAlBIP,IAAcN,EAASK,SACzBS,EAAcC,MAAK,SAACC,EAAWC,GAC7B,OAAIX,IAAcN,EAASkB,eAClBF,EAAUG,cAAcF,GAG7BX,IAAcN,EAASoB,SAClBJ,EAAUK,OAASJ,EAAWI,OAGhC,KAIPb,IAAeP,EAAUU,WAC3BG,EAAcQ,UAGTR,EAUHS,CAAiBrB,EAAiBI,EAAWE,GAmBjD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYpB,IAAcN,EAASkB,iBAEvCS,QAAS,kBAAMpB,EAAaP,EAASkB,iBANvC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYpB,IAAcN,EAASoB,WAEvCO,QAAS,kBAAMpB,EAAaP,EAASoB,WANvC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IAAW,oBACpB,CAAE,WAAYlB,IAAeP,EAAUU,YACzCgB,QAAS,kBAAMlB,EAA4BD,IAtC7BP,EAAUU,UACdV,EAAU2B,WAEV3B,EAAUU,YA+BtB,qBASCD,GACC,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAtDjBpB,EAAaP,EAASK,cACtBI,EAAcR,EAAUI,UAkDlB,sBAUJ,6BACE,6BACGO,EAAaiB,KAAI,SAACC,GACjB,OACE,oBACEN,UAAU,KACV,UAAQ,OAFV,SAKGM,GALH,UAGUA,EAHV,qBClIdC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4e7765ee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Default = '',\n  Alphabetically = 'name',\n  ByLength = 'length',\n}\n\nenum SortOrder {\n  Default = 0,\n  Ascending = 1,\n  Descending = -1,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  isReversed: SortOrder,\n): string[] {\n  const preparedGoods: string[] = [...goods];\n\n  if (sortField !== SortType.Default) {\n    preparedGoods.sort((firstItem, secondItem) => {\n      if (sortField === SortType.Alphabetically) {\n        return firstItem.localeCompare(secondItem);\n      }\n\n      if (sortField === SortType.ByLength) {\n        return firstItem.length - secondItem.length;\n      }\n\n      return 0;\n    });\n  }\n\n  if (isReversed === SortOrder.Ascending) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.Default);\n  const [isReversed, setIsReversed] = useState(SortOrder.Default);\n  const isResetButtonVisible = sortField !== SortType.Default\n    || isReversed === SortOrder.Ascending;\n\n  const visibleGoods: string[]\n    = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  function setSortReverse(): void {\n    setSortField(SortType.Default);\n    setIsReversed(SortOrder.Default);\n  }\n\n  function changeAscDesc(value: SortOrder): SortOrder {\n    let typeOfOrder = value;\n\n    if (typeOfOrder === SortOrder.Ascending) {\n      typeOfOrder = SortOrder.Descending;\n    } else {\n      typeOfOrder = SortOrder.Ascending;\n    }\n\n    return typeOfOrder;\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortField !== SortType.Alphabetically },\n          )}\n          onClick={() => setSortField(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortField !== SortType.ByLength },\n          )}\n          onClick={() => setSortField(SortType.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning',\n            { 'is-light': isReversed !== SortOrder.Ascending })}\n          onClick={() => setIsReversed(changeAscDesc(isReversed))}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setSortReverse()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map((item) => {\n            return (\n              <li\n                className=\"li\"\n                data-cy=\"Good\"\n                key={`${item} item`}\n              >\n                {item}\n              </li>\n            );\n          })}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}