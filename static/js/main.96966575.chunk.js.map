{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","SortOrder","goodsFromServer","App","order","useState","Default","sortType","setSortType","isReversed","setIsReversed","isResetButtonVisible","Ascending","sortedGoods","goods","preparedGoods","sort","item1","item2","Alphabetically","localeCompare","ByLength","length","reverse","getPreparedGoods","className","type","classNames","onClick","Descending","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,EAMAC,E,0EAnBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGF,K,WAAAA,E,gCAAAA,E,mBAAAA,M,cAMAC,O,qBAAAA,I,yBAAAA,I,6BAAAA,M,KA+CE,IAAME,EAAgB,WAC3B,IAR6BC,EAQ7B,EAAgCC,mBAASL,EAASM,SAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,mBAASJ,EAAUK,SAAvD,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAAuBJ,GAAYE,IAAeR,EAAUW,UAE5DC,EA9CR,SACEC,EACAP,EACAE,GAEA,IAAMM,EAAuB,YAAOD,GAoBpC,OAlBIP,IAAaP,EAASM,SACxBS,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAIX,IAAaP,EAASmB,eACjBF,EAAMG,cAAcF,GAGzBX,IAAaP,EAASqB,SACjBJ,EAAMK,OAASJ,EAAMI,OAGvB,KAIPb,IAAeR,EAAUW,WAC3BG,EAAcQ,UAGTR,EAsBHS,CAAiBtB,EAAiBK,EAAUE,GAOhD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYpB,IAAaP,EAASmB,iBAEtCS,QAAS,kBAAMpB,EAAYR,EAASmB,iBAPtC,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYpB,IAAaP,EAASqB,WAEtCO,QAAS,kBAAMpB,EAAYR,EAASqB,WAPtC,4BAYA,wBACEK,KAAK,SACLD,WAjDqBrB,EAiDYK,EAhDlCkB,IACL,SAAU,aACV,CAAE,WAAYvB,IAAUH,EAAUW,aA+C5BgB,QAAS,kBAAMlB,EAA4BD,IAvDlCR,EAAUW,UACvBX,EAAU4B,WACV5B,EAAUW,YAkDR,qBAQCD,GACC,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA5CV,WACEpB,EAAYR,EAASM,SACrBI,EAAcT,EAAUK,UAuClB,sBAUJ,6BACE,6BACGO,EAAYiB,KAAI,SAACC,GAAD,OACf,oBACEN,UAAU,KACV,UAAQ,OAFV,SAKGM,GALH,UAGUA,EAHV,qBClIZC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.96966575.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Default = '',\n  Alphabetically = 'alphabetically',\n  ByLength = 'length',\n}\n\nenum SortOrder {\n  Default = 0,\n  Ascending = 1,\n  Descending = -1,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: SortOrder,\n): string[] {\n  const preparedGoods: string[] = [...goods];\n\n  if (sortType !== SortType.Default) {\n    preparedGoods.sort((item1, item2) => {\n      if (sortType === SortType.Alphabetically) {\n        return item1.localeCompare(item2);\n      }\n\n      if (sortType === SortType.ByLength) {\n        return item1.length - item2.length;\n      }\n\n      return 0;\n    });\n  }\n\n  if (isReversed === SortOrder.Ascending) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nfunction changeAscDesc(value: SortOrder): SortOrder {\n  return value === SortOrder.Ascending\n    ? SortOrder.Descending\n    : SortOrder.Ascending;\n}\n\nfunction getWarningButtonClass(order: SortOrder): string {\n  return classNames(\n    'button', 'is-warning',\n    { 'is-light': order !== SortOrder.Ascending },\n  );\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.Default);\n  const [isReversed, setIsReversed] = useState(SortOrder.Default);\n  const isResetButtonVisible = sortType || isReversed === SortOrder.Ascending;\n\n  const sortedGoods: string[]\n    = getPreparedGoods(goodsFromServer, sortType, isReversed);\n\n  function handleButtonReset(): void {\n    setSortType(SortType.Default);\n    setIsReversed(SortOrder.Default);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.Alphabetically },\n          )}\n          onClick={() => setSortType(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.ByLength },\n          )}\n          onClick={() => setSortType(SortType.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={getWarningButtonClass(isReversed)}\n          onClick={() => setIsReversed(changeAscDesc(isReversed))}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleButtonReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {sortedGoods.map((item) => (\n            <li\n              className=\"li\"\n              data-cy=\"Good\"\n              key={`${item}_item`}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}